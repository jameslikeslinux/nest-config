diff -ur firefox-130.0.1.orig/js/src/jit/MacroAssembler.h firefox-130.0.1/js/src/jit/MacroAssembler.h
--- firefox-130.0.1.orig/js/src/jit/MacroAssembler.h	2024-10-14 15:26:21.905402713 -0400
+++ firefox-130.0.1/js/src/jit/MacroAssembler.h	2024-10-15 13:11:40.162707961 -0400
@@ -665,7 +665,7 @@
   CodeOffset farJumpWithPatch() PER_SHARED_ARCH;
   void patchFarJump(CodeOffset farJump, uint32_t targetOffset) PER_SHARED_ARCH;
   static void patchFarJump(uint8_t* farJump, uint8_t* target)
-      DEFINED_ON(arm, arm64, x86_shared, loong64, mips_shared);
+      DEFINED_ON(arm, arm64, x86_shared, loong64, riscv64, mips_shared);
 
   // Emit a nop that can be patched to and from a nop and a call with int32
   // relative displacement.
diff -ur firefox-130.0.1.orig/js/src/jit/riscv64/MacroAssembler-riscv64.cpp firefox-130.0.1/js/src/jit/riscv64/MacroAssembler-riscv64.cpp
--- firefox-130.0.1.orig/js/src/jit/riscv64/MacroAssembler-riscv64.cpp	2024-10-14 15:26:21.802401419 -0400
+++ firefox-130.0.1/js/src/jit/riscv64/MacroAssembler-riscv64.cpp	2024-10-15 13:11:16.316398822 -0400
@@ -3403,6 +3403,12 @@
   *u32 = targetOffset - farJump.offset();
 }
 
+void MacroAssembler::patchFarJump(uint8_t* farJump, uint8_t* target) {
+  uint32_t* u32 = reinterpret_cast<uint32_t*>(farJump + 4 * kInstrSize);
+  MOZ_ASSERT(*u32 == UINT32_MAX);
+  *u32 = (int64_t)target - (int64_t)farJump;
+}
+
 void MacroAssembler::patchNearAddressMove(CodeLocationLabel loc,
                                           CodeLocationLabel target) {
   PatchDataWithValueCheck(loc, ImmPtr(target.raw()), ImmPtr(nullptr));
